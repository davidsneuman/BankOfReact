{"ast":null,"code":"var _jsxFileName = \"/Users/davidneuman/OneDrive - Hunter - CUNY/COLLEGE/WEB DEVELOPMENT/BankOfReact/src/App.js\";\n\n/*==================================================\nsrc/App.js\n\nThis is the top-level component of the app.\nIt contains the top-level state.\n==================================================*/\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport axios from 'axios'; // Import other components\n\nimport Home from './components/Home';\nimport UserProfile from './components/UserProfile';\nimport LogIn from './components/Login';\nimport Credits from './components/Credits';\nimport Debits from './components/Debits';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    // Create and initialize state\n    super();\n\n    this.mockLogIn = logInInfo => {\n      const newUser = { ...this.state.currentUser\n      };\n      newUser.userName = logInInfo.userName;\n      this.setState({\n        currentUser: newUser\n      });\n    };\n\n    this.addCreditInfo = creditInfo => {\n      let today = new Date();\n      let date = today.getFullYear() + '-' + parseInt(today.getMonth() + 1) + '-' + today.getDate();\n      const newCreditInfo = {\n        amount: parseFloat(creditInfo.amount),\n        date: date,\n        description: creditInfo.description,\n        id: this.state.uniqueId\n      };\n      var newCreditList = this.state.creditList;\n      newCreditList.push(newCreditInfo);\n      const newAccountBalance = this.state.accountBalance + newCreditInfo.amount;\n      this.setState({\n        credits: newCreditList\n      });\n      this.setState({\n        accountBalance: newAccountBalance\n      });\n      this.setState({\n        uniqueId: this.state.uniqueId + 1\n      });\n    };\n\n    this.addDebitInfo = debitInfo => {\n      let today = new Date();\n      let date = today.getFullYear() + '-' + parseInt(today.getMonth() + 1) + '-' + today.getDate();\n      const newDebitInfo = {\n        amount: parseFloat(debitInfo.amount),\n        date: date,\n        description: debitInfo.description,\n        id: this.state.uniqueId\n      };\n      var newdebitList = this.state.debitList;\n      newdebitList.push(newDebitInfo);\n      const newAccountBalance = this.state.accountBalance - newDebitInfo.amount;\n      this.setState({\n        debits: newdebitList\n      });\n      this.setState({\n        accountBalance: newAccountBalance\n      });\n      this.setState({\n        uniqueId: this.state.uniqueId + 1\n      });\n    };\n\n    this.addCredits = () => {\n      var sumCredits = 0;\n      this.state.creditList.forEach(credit => sumCredits += credit.amount);\n      this.setState({\n        accountBalance: this.state.accountBalance + sumCredits\n      });\n    };\n\n    this.addDebits = () => {\n      var sumDebits = 0;\n      this.state.debitList.forEach(debit => sumDebits += debit.amount);\n      this.setState({\n        accountBalance: this.state.accountBalance - sumDebits\n      });\n    };\n\n    this.state = {\n      accountBalance: 0,\n      creditList: [],\n      debitList: [],\n      uniqueId: 0,\n      //required for duplicate entries in credit/debit\n      currentUser: {\n        userName: 'Joe Smith',\n        memberSince: '11/22/99'\n      }\n    };\n  } // Update state's currentUser (userName) after \"Log In\" button is clicked\n\n\n  // Create Routes and React elements to be rendered using React components\n  render() {\n    // Create React elements and pass input props to components\n    const HomeComponent = () => /*#__PURE__*/_jsxDEV(Home, {\n      accountBalance: this.state.accountBalance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 34\n    }, this);\n\n    const UserProfileComponent = () => /*#__PURE__*/_jsxDEV(UserProfile, {\n      userName: this.state.currentUser.userName,\n      memberSince: this.state.currentUser.memberSince\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this);\n\n    const LogInComponent = () => /*#__PURE__*/_jsxDEV(LogIn, {\n      user: this.state.currentUser,\n      mockLogIn: this.mockLogIn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 35\n    }, this);\n\n    const CreditsComponent = () => /*#__PURE__*/_jsxDEV(Credits, {\n      credits: this.state.creditList,\n      accountBalance: this.state.accountBalance,\n      addCreditInfo: this.addCreditInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 37\n    }, this);\n\n    const DebitsComponent = () => /*#__PURE__*/_jsxDEV(Debits, {\n      debits: this.state.debitList,\n      accountBalance: this.state.accountBalance,\n      addDebitInfo: this.addDebitInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 36\n    }, this); // Important: Include the \"basename\" in Router, which is needed for deploying the React app to GitHub Pages\n\n\n    return /*#__PURE__*/_jsxDEV(Router, {\n      basename: \"/bank-of-react-example-code-gh-pages\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          render: HomeComponent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/userProfile\",\n          render: UserProfileComponent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/login\",\n          render: LogInComponent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/credits\",\n          render: CreditsComponent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/debits\",\n          render: DebitsComponent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this);\n  } // Make async API call to retrieve data from remote website\n\n\n  async componentDidMount() {\n    //CREDIT API CALL\n    let creditEndpoint = 'https://moj-api.herokuapp.com/credits'; // Link to remote website API endpoint\n    // Await for promise (completion) returned from API call\n\n    try {\n      // Accept success response as array of JSON objects\n      let response = await axios.get(creditEndpoint); // To get data object in the response, need to use \"response.data\"\n\n      this.setState({\n        creditList: response.data\n      });\n      this.addCredits();\n    } catch (error) {\n      // Print out errors at console when there is an error response\n      if (error.response) {\n        // The request was made, and the server responded with error message and status code.\n        console.log(error.response.data); // Print out error message (e.g., Not Found)\n\n        console.log(error.response.status); // Print out error status code (e.g., 404)\n      }\n    } //DEBIT API CALL\n\n\n    let debitEndpoint = 'https://moj-api.herokuapp.com/debits'; // Link to remote website API endpoint\n    // Await for promise (completion) returned from API call\n\n    try {\n      // Accept success response as array of JSON objects\n      let response = await axios.get(debitEndpoint); // To get data object in the response, need to use \"response.data\"\n\n      this.setState({\n        debitList: response.data\n      });\n      this.addDebits();\n    } catch (error) {\n      // Print out errors at console when there is an error response\n      if (error.response) {\n        // The request was made, and the server responded with error message and status code.\n        console.log(error.response.data); // Print out error message (e.g., Not Found)\n\n        console.log(error.response.status); // Print out error status code (e.g., 404)\n      }\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/davidneuman/OneDrive - Hunter - CUNY/COLLEGE/WEB DEVELOPMENT/BankOfReact/src/App.js"],"names":["React","Component","BrowserRouter","Router","Route","axios","Home","UserProfile","LogIn","Credits","Debits","App","constructor","mockLogIn","logInInfo","newUser","state","currentUser","userName","setState","addCreditInfo","creditInfo","today","Date","date","getFullYear","parseInt","getMonth","getDate","newCreditInfo","amount","parseFloat","description","id","uniqueId","newCreditList","creditList","push","newAccountBalance","accountBalance","credits","addDebitInfo","debitInfo","newDebitInfo","newdebitList","debitList","debits","addCredits","sumCredits","forEach","credit","addDebits","sumDebits","debit","memberSince","render","HomeComponent","UserProfileComponent","LogInComponent","CreditsComponent","DebitsComponent","componentDidMount","creditEndpoint","response","get","data","error","console","log","status","debitEndpoint"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,aAAa,IAAIC,MAAzB,EAAiCC,KAAjC,QAA6C,kBAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;;AAEA,MAAMC,GAAN,SAAkBV,SAAlB,CAA4B;AAC1BW,EAAAA,WAAW,GAAG;AAAG;AACf;;AADY,SAedC,SAfc,GAeDC,SAAD,IAAe;AACzB,YAAMC,OAAO,GAAG,EAAC,GAAG,KAAKC,KAAL,CAAWC;AAAf,OAAhB;AACAF,MAAAA,OAAO,CAACG,QAAR,GAAmBJ,SAAS,CAACI,QAA7B;AACA,WAAKC,QAAL,CAAc;AAACF,QAAAA,WAAW,EAAEF;AAAd,OAAd;AACD,KAnBa;;AAAA,SAsBdK,aAtBc,GAsBGC,UAAD,IAAgB;AAC9B,UAAIC,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AACA,UAAIC,IAAI,GAAGF,KAAK,CAACG,WAAN,KAAsB,GAAtB,GAA4BC,QAAQ,CAACJ,KAAK,CAACK,QAAN,KAAmB,CAApB,CAApC,GAA6D,GAA7D,GAAmEL,KAAK,CAACM,OAAN,EAA9E;AACA,YAAMC,aAAa,GAAG;AAClBC,QAAAA,MAAM,EAAEC,UAAU,CAACV,UAAU,CAACS,MAAZ,CADA;AAElBN,QAAAA,IAAI,EAAEA,IAFY;AAGlBQ,QAAAA,WAAW,EAAEX,UAAU,CAACW,WAHN;AAIlBC,QAAAA,EAAE,EAAE,KAAKjB,KAAL,CAAWkB;AAJG,OAAtB;AAMA,UAAIC,aAAa,GAAG,KAAKnB,KAAL,CAAWoB,UAA/B;AACAD,MAAAA,aAAa,CAACE,IAAd,CAAmBR,aAAnB;AACA,YAAMS,iBAAiB,GAAG,KAAKtB,KAAL,CAAWuB,cAAX,GAA4BV,aAAa,CAACC,MAApE;AACA,WAAKX,QAAL,CAAc;AAACqB,QAAAA,OAAO,EAAEL;AAAV,OAAd;AACA,WAAKhB,QAAL,CAAc;AAACoB,QAAAA,cAAc,EAAED;AAAjB,OAAd;AACA,WAAKnB,QAAL,CAAc;AAACe,QAAAA,QAAQ,EAAE,KAAKlB,KAAL,CAAWkB,QAAX,GAAsB;AAAjC,OAAd;AACD,KArCa;;AAAA,SAwCZO,YAxCY,GAwCIC,SAAD,IAAe;AAC1B,UAAIpB,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AACA,UAAIC,IAAI,GAAGF,KAAK,CAACG,WAAN,KAAsB,GAAtB,GAA4BC,QAAQ,CAACJ,KAAK,CAACK,QAAN,KAAmB,CAApB,CAApC,GAA6D,GAA7D,GAAmEL,KAAK,CAACM,OAAN,EAA9E;AACA,YAAMe,YAAY,GAAG;AACjBb,QAAAA,MAAM,EAAEC,UAAU,CAACW,SAAS,CAACZ,MAAX,CADD;AAEjBN,QAAAA,IAAI,EAAEA,IAFW;AAGjBQ,QAAAA,WAAW,EAAEU,SAAS,CAACV,WAHN;AAIjBC,QAAAA,EAAE,EAAE,KAAKjB,KAAL,CAAWkB;AAJE,OAArB;AAMA,UAAIU,YAAY,GAAG,KAAK5B,KAAL,CAAW6B,SAA9B;AACAD,MAAAA,YAAY,CAACP,IAAb,CAAkBM,YAAlB;AACA,YAAML,iBAAiB,GAAG,KAAKtB,KAAL,CAAWuB,cAAX,GAA4BI,YAAY,CAACb,MAAnE;AACA,WAAKX,QAAL,CAAc;AAAC2B,QAAAA,MAAM,EAAEF;AAAT,OAAd;AACA,WAAKzB,QAAL,CAAc;AAACoB,QAAAA,cAAc,EAAED;AAAjB,OAAd;AACA,WAAKnB,QAAL,CAAc;AAACe,QAAAA,QAAQ,EAAE,KAAKlB,KAAL,CAAWkB,QAAX,GAAsB;AAAjC,OAAd;AACD,KAvDS;;AAAA,SA0Dda,UA1Dc,GA0DD,MAAM;AACjB,UAAIC,UAAU,GAAG,CAAjB;AACA,WAAKhC,KAAL,CAAWoB,UAAX,CAAsBa,OAAtB,CAA+BC,MAAD,IAAYF,UAAU,IAAIE,MAAM,CAACpB,MAA/D;AACA,WAAKX,QAAL,CAAc;AAACoB,QAAAA,cAAc,EAAE,KAAKvB,KAAL,CAAWuB,cAAX,GAA4BS;AAA7C,OAAd;AACD,KA9Da;;AAAA,SAiEZG,SAjEY,GAiEA,MAAM;AACd,UAAIC,SAAS,GAAG,CAAhB;AACA,WAAKpC,KAAL,CAAW6B,SAAX,CAAqBI,OAArB,CAA8BI,KAAD,IAAWD,SAAS,IAAIC,KAAK,CAACvB,MAA3D;AACA,WAAKX,QAAL,CAAc;AAACoB,QAAAA,cAAc,EAAE,KAAKvB,KAAL,CAAWuB,cAAX,GAA4Ba;AAA7C,OAAd;AACD,KArES;;AAEZ,SAAKpC,KAAL,GAAa;AACXuB,MAAAA,cAAc,EAAE,CADL;AAEXH,MAAAA,UAAU,EAAE,EAFD;AAGXS,MAAAA,SAAS,EAAE,EAHA;AAIXX,MAAAA,QAAQ,EAAE,CAJC;AAIE;AACbjB,MAAAA,WAAW,EAAE;AACXC,QAAAA,QAAQ,EAAE,WADC;AAEXoC,QAAAA,WAAW,EAAE;AAFF;AALF,KAAb;AAUD,GAbyB,CAe1B;;;AAyDA;AACAC,EAAAA,MAAM,GAAG;AACP;AACA,UAAMC,aAAa,GAAG,mBAAO,QAAC,IAAD;AAAM,MAAA,cAAc,EAAE,KAAKxC,KAAL,CAAWuB;AAAjC;AAAA;AAAA;AAAA;AAAA,YAA7B;;AACA,UAAMkB,oBAAoB,GAAG,mBAC3B,QAAC,WAAD;AAAa,MAAA,QAAQ,EAAE,KAAKzC,KAAL,CAAWC,WAAX,CAAuBC,QAA9C;AAAwD,MAAA,WAAW,EAAE,KAAKF,KAAL,CAAWC,WAAX,CAAuBqC;AAA5F;AAAA;AAAA;AAAA;AAAA,YADF;;AAGA,UAAMI,cAAc,GAAG,mBAAO,QAAC,KAAD;AAAO,MAAA,IAAI,EAAE,KAAK1C,KAAL,CAAWC,WAAxB;AAAqC,MAAA,SAAS,EAAE,KAAKJ;AAArD;AAAA;AAAA;AAAA;AAAA,YAA9B;;AACA,UAAM8C,gBAAgB,GAAG,mBAAO,QAAC,OAAD;AAAS,MAAA,OAAO,EAAE,KAAK3C,KAAL,CAAWoB,UAA7B;AAAyC,MAAA,cAAc,EAAE,KAAKpB,KAAL,CAAWuB,cAApE;AAAoF,MAAA,aAAa,EAAE,KAAKnB;AAAxG;AAAA;AAAA;AAAA;AAAA,YAAhC;;AACA,UAAMwC,eAAe,GAAG,mBAAO,QAAC,MAAD;AAAQ,MAAA,MAAM,EAAE,KAAK5C,KAAL,CAAW6B,SAA3B;AAAsC,MAAA,cAAc,EAAE,KAAK7B,KAAL,CAAWuB,cAAjE;AAAiF,MAAA,YAAY,EAAE,KAAKE;AAApG;AAAA;AAAA;AAAA;AAAA,YAA/B,CARO,CAUP;;;AACA,wBACE,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAC,sCAAjB;AAAA,6BACE;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,GAAlB;AAAsB,UAAA,MAAM,EAAEe;AAA9B;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,cAAlB;AAAiC,UAAA,MAAM,EAAEC;AAAzC;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,QAAlB;AAA2B,UAAA,MAAM,EAAEC;AAAnC;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,UAAlB;AAA6B,UAAA,MAAM,EAAEC;AAArC;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,SAAlB;AAA4B,UAAA,MAAM,EAAEC;AAApC;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAWD,GA/FyB,CAiGpB;;;AACuB,QAAjBC,iBAAiB,GAAG;AACtB;AACA,QAAIC,cAAc,GAAG,uCAArB,CAFsB,CAEyC;AAE/D;;AACA,QAAI;AAAG;AACH,UAAIC,QAAQ,GAAG,MAAM1D,KAAK,CAAC2D,GAAN,CAAUF,cAAV,CAArB,CADA,CAEA;;AACA,WAAK3C,QAAL,CAAc;AAACiB,QAAAA,UAAU,EAAE2B,QAAQ,CAACE;AAAtB,OAAd;AACA,WAAKlB,UAAL;AACH,KALD,CAMA,OAAOmB,KAAP,EAAc;AAAG;AACf,UAAIA,KAAK,CAACH,QAAV,EAAoB;AAClB;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACH,QAAN,CAAeE,IAA3B,EAFkB,CAEiB;;AACnCE,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACH,QAAN,CAAeM,MAA3B,EAHkB,CAGmB;AACtC;AACF,KAjBqB,CAoBtB;;;AACA,QAAIC,aAAa,GAAG,sCAApB,CArBsB,CAqBuC;AAE7D;;AACA,QAAI;AAAG;AACH,UAAIP,QAAQ,GAAG,MAAM1D,KAAK,CAAC2D,GAAN,CAAUM,aAAV,CAArB,CADA,CAEA;;AACA,WAAKnD,QAAL,CAAc;AAAC0B,QAAAA,SAAS,EAAEkB,QAAQ,CAACE;AAArB,OAAd;AACA,WAAKd,SAAL;AACH,KALD,CAMA,OAAOe,KAAP,EAAc;AAAG;AACf,UAAIA,KAAK,CAACH,QAAV,EAAoB;AAClB;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACH,QAAN,CAAeE,IAA3B,EAFkB,CAEiB;;AACnCE,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACH,QAAN,CAAeM,MAA3B,EAHkB,CAGmB;AACtC;AACF;AAEF;;AAxIiB;;AA2I5B,eAAe1D,GAAf","sourcesContent":["/*==================================================\nsrc/App.js\n\nThis is the top-level component of the app.\nIt contains the top-level state.\n==================================================*/\nimport React, {Component} from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport axios from 'axios';\n\n// Import other components\nimport Home from './components/Home';\nimport UserProfile from './components/UserProfile';\nimport LogIn from './components/Login';\nimport Credits from './components/Credits';\nimport Debits from './components/Debits';\n\nclass App extends Component {\n  constructor() {  // Create and initialize state\n    super(); \n    this.state = {\n      accountBalance: 0,\n      creditList: [],\n      debitList: [],\n      uniqueId: 0, //required for duplicate entries in credit/debit\n      currentUser: {\n        userName: 'Joe Smith',\n        memberSince: '11/22/99',\n      }\n    }\n  }\n\n  // Update state's currentUser (userName) after \"Log In\" button is clicked\n  mockLogIn = (logInInfo) => {  \n    const newUser = {...this.state.currentUser}\n    newUser.userName = logInInfo.userName\n    this.setState({currentUser: newUser})\n  }\n\n  // add a new credit entry\n  addCreditInfo = (creditInfo) => {\n    let today = new Date()\n    let date = today.getFullYear() + '-' + parseInt(today.getMonth() + 1) + '-' + today.getDate() \n    const newCreditInfo = {\n        amount: parseFloat(creditInfo.amount),\n        date: date,\n        description: creditInfo.description,\n        id: this.state.uniqueId\n    }\n    var newCreditList = this.state.creditList\n    newCreditList.push(newCreditInfo)\n    const newAccountBalance = this.state.accountBalance + newCreditInfo.amount\n    this.setState({credits: newCreditList})\n    this.setState({accountBalance: newAccountBalance})\n    this.setState({uniqueId: this.state.uniqueId + 1})    \n  }\n\n    // add a new credit entry\n    addDebitInfo = (debitInfo) => {\n        let today = new Date()\n        let date = today.getFullYear() + '-' + parseInt(today.getMonth() + 1) + '-' + today.getDate() \n        const newDebitInfo = {\n            amount: parseFloat(debitInfo.amount),\n            date: date,\n            description: debitInfo.description,\n            id: this.state.uniqueId\n        }\n        var newdebitList = this.state.debitList\n        newdebitList.push(newDebitInfo)\n        const newAccountBalance = this.state.accountBalance - newDebitInfo.amount\n        this.setState({debits: newdebitList})\n        this.setState({accountBalance: newAccountBalance})\n        this.setState({uniqueId: this.state.uniqueId + 1})    \n      }\n\n  // sum credits\n  addCredits = () => {\n    var sumCredits = 0;\n    this.state.creditList.forEach((credit) => sumCredits += credit.amount)\n    this.setState({accountBalance: this.state.accountBalance + sumCredits})\n  }\n\n    // sum debits\n    addDebits = () => {\n        var sumDebits = 0;\n        this.state.debitList.forEach((debit) => sumDebits += debit.amount)\n        this.setState({accountBalance: this.state.accountBalance - sumDebits})\n      }\n\n  // Create Routes and React elements to be rendered using React components\n  render() {  \n    // Create React elements and pass input props to components\n    const HomeComponent = () => (<Home accountBalance={this.state.accountBalance} />);\n    const UserProfileComponent = () => (\n      <UserProfile userName={this.state.currentUser.userName} memberSince={this.state.currentUser.memberSince} />\n    );\n    const LogInComponent = () => (<LogIn user={this.state.currentUser} mockLogIn={this.mockLogIn} />)\n    const CreditsComponent = () => (<Credits credits={this.state.creditList} accountBalance={this.state.accountBalance} addCreditInfo={this.addCreditInfo}/>)\n    const DebitsComponent = () => (<Debits debits={this.state.debitList} accountBalance={this.state.accountBalance} addDebitInfo={this.addDebitInfo}/>) \n\n    // Important: Include the \"basename\" in Router, which is needed for deploying the React app to GitHub Pages\n    return (\n      <Router basename=\"/bank-of-react-example-code-gh-pages\">\n        <div>\n          <Route exact path=\"/\" render={HomeComponent}/>\n          <Route exact path=\"/userProfile\" render={UserProfileComponent}/>\n          <Route exact path=\"/login\" render={LogInComponent}/>\n          <Route exact path=\"/credits\" render={CreditsComponent}/>\n          <Route exact path=\"/debits\" render={DebitsComponent}/>\n        </div>\n      </Router>\n    );\n  }\n\n        // Make async API call to retrieve data from remote website\n        async componentDidMount() {\n            //CREDIT API CALL\n            let creditEndpoint = 'https://moj-api.herokuapp.com/credits';  // Link to remote website API endpoint\n        \n            // Await for promise (completion) returned from API call\n            try {  // Accept success response as array of JSON objects\n                let response = await axios.get(creditEndpoint);\n                // To get data object in the response, need to use \"response.data\"\n                this.setState({creditList: response.data}); \n                this.addCredits(); \n            } \n            catch (error) {  // Print out errors at console when there is an error response\n              if (error.response) {\n                // The request was made, and the server responded with error message and status code.\n                console.log(error.response.data);  // Print out error message (e.g., Not Found)\n                console.log(error.response.status);  // Print out error status code (e.g., 404)\n              }    \n            }\n\n\n            //DEBIT API CALL\n            let debitEndpoint = 'https://moj-api.herokuapp.com/debits';  // Link to remote website API endpoint\n        \n            // Await for promise (completion) returned from API call\n            try {  // Accept success response as array of JSON objects\n                let response = await axios.get(debitEndpoint);\n                // To get data object in the response, need to use \"response.data\"\n                this.setState({debitList: response.data}); \n                this.addDebits();\n            } \n            catch (error) {  // Print out errors at console when there is an error response\n              if (error.response) {\n                // The request was made, and the server responded with error message and status code.\n                console.log(error.response.data);  // Print out error message (e.g., Not Found)\n                console.log(error.response.status);  // Print out error status code (e.g., 404)\n              }    \n            }\n\n          }  \n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}